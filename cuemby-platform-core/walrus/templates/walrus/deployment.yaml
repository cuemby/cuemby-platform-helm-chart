{{- if .Values.walrus.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: walrus-system
  name: walrus
  labels:
    "app.kubernetes.io/part-of": "walrus"
    "app.kubernetes.io/component": "walrus"
    "app.kubernetes.io/name": "walrus-server"
spec:
  replicas: 1
  selector:
    matchLabels:
      "app.kubernetes.io/part-of": "walrus"
      "app.kubernetes.io/component": "walrus"
      "app.kubernetes.io/name": "walrus-server"
  template:
    metadata:
      labels:
        "app.kubernetes.io/part-of": "walrus"
        "app.kubernetes.io/component": "walrus"
        "app.kubernetes.io/name": "walrus-server"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchExpressions:
                    - key: "app.kubernetes.io/component"
                      operator: In
                      values:
                        - "walrus"
                    - key: "app.kubernetes.io/part-of"
                      operator: In
                      values:
                        - "walrus"
                    - key: "app.kubernetes.io/name"
                      operator: In
                      values:
                        - "walrus-server"
      restartPolicy: Always
      serviceAccountName: walrus
      containers:
        - name: walrus-server
          image: sealio/walrus:v0.6.0
          imagePullPolicy: Always
          resources:
            limits:
              memory: '8Gi'
            requests:
              cpu: '500m'
              memory: '512Mi'
          env:
            {{- range $key, $value := .Values.walrus.environment }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: DB_DRIVER
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: db_driver
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: db_user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: db_password
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: db_name
            - name: DATABASE_PORT_5432_TCP_PROTO
              value: tcp
            - name: DATABASE_SERVICE_PORT
              value: "5432"
            - name: DATABASE_PORT_5432_TCP_PORT
              value: $(DATABASE_SERVICE_PORT)
            - name: DATABASE_PORT
              value: $(DATABASE_PORT_5432_TCP_PROTO)://$(DATABASE_SERVICE_HOST):$(DATABASE_SERVICE_PORT)
            - name: DATABASE_SERVICE_PORT_CONN
              value: $(DATABASE_SERVICE_PORT)
            - name: DATABASE_PORT_5432_TCP
              value: $(DATABASE_PORT_5432_TCP_PROTO)://$(DATABASE_SERVICE_HOST):$(DATABASE_SERVICE_PORT)
            - name: DATABASE_PORT_5432_TCP_ADDR
              value: $(DATABASE_SERVICE_HOST)
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: minio_root_user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: minio_root_password
            - name: MINIO_BUCKET
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: minio_bucket
            - name: MINIO_SERVICE_HOST
              value: cuemby-core-supabase-minio.cuemby-system.svc.cluster.local
            - name: MINIO_PORT_9001_TCP_PROTO
              value: tcp
            - name: MINIO_PORT_9001_TCP_PORT
              value: "9001"
            - name: MINIO_PORT_9001_TCP_ADDR
              value: $(MINIO_SERVICE_HOST)
            - name: MINIO_PORT_9001_TCP
              value: $(MINIO_PORT_9001_TCP_PROTO)://$(MINIO_SERVICE_HOST):$(MINIO_PORT_9001_TCP_PORT)
            - name: MINIO_SERVICE_PORT_MINIO_DASHBOARD
              value: $(MINIO_PORT_9001_TCP_PORT)
            - name: MINIO_PORT_9000_TCP_ADDR
              value: $(MINIO_SERVICE_HOST)
            - name: MINIO_SERVICE_PORT
              value: "9000"
            - name: MINIO_SERVICE_PORT_MINIO_API
              value: $(MINIO_SERVICE_PORT)
            - name: MINIO_PORT_9000_TCP_PORT
              value: $(MINIO_SERVICE_PORT)
            - name: MINIO_PORT_9000_TCP_PROTO
              value: tcp
            - name: MINIO_PORT_9000_TCP
              value: $(MINIO_PORT_9000_TCP_PROTO)://$(MINIO_SERVICE_HOST):$(MINIO_PORT_9000_TCP_PORT)
            - name: MINIO_PORT
              value: $(MINIO_PORT_9000_TCP_PROTO)://$(MINIO_SERVICE_HOST):$(MINIO_PORT_9000_TCP_PORT)
            - name: SERVER_S3_SOURCE_ADDRESS
              value: s3://$(MINIO_ROOT_USER):$(MINIO_ROOT_PASSWORD)@$(MINIO_SERVICE_HOST):9000/$(MINIO_BUCKET)?sslmode=disable

            - name: SERVER_SETTING_LOCAL_ENVIRONMENT_MODE
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: local_environment_mode
            - name: SERVER_SETTING_DEPLOYER_IMAGE
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: SERVER_SETTING_DEPLOYER_IMAGE
            - name: SERVER_ENABLE_TLS
              valueFrom:
                secretKeyRef:
                  name: walrus-secrets
                  key: enable_tls
            - name: SERVER_DATA_SOURCE_ADDRESS
              value: $(DB_DRIVER)://$(DB_USER):$(DB_PASSWORD)@$(DATABASE_SERVICE_HOST):5432/$(DB_NAME)?sslmode=disable
            - name: SERVER_CASDOOR_SERVER
              value: http://identity-access-manager.walrus-system.svc.cluster.local:8000
            - name: WALRUS_MIRROR_HERMITCRAB_SERVICE_HOST
              value: walrus-mirror-hermitcrab.walrus-system.svc.cluster.local
            - name: WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTPS
              value: "443"
            - name: WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTP
              value: "80"
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_443_TCP_PROTO
              value: tcp
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_80_TCP_PROTO
              value: tcp
            - name: WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT
              value: $(WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTP)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT
              value: $(WALRUS_MIRROR_HERMITCRAB_PORT_80_TCP_PROTO)://$(WALRUS_MIRROR_HERMITCRAB_SERVICE_HOST):$(WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTP)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_80_TCP_PORT
              value: $(WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTP)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_443_TCP_ADDR
              value: $(WALRUS_MIRROR_HERMITCRAB_SERVICE_HOST)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_80_TCP
              value: $(WALRUS_MIRROR_HERMITCRAB_PORT_80_TCP_PROTO)://$(WALRUS_MIRROR_HERMITCRAB_SERVICE_HOST):$(WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTP)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_443_TCP_PORT
              value: $(WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTPS)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_80_TCP_ADDR
              value: $(WALRUS_MIRROR_HERMITCRAB_SERVICE_HOST)
            - name: WALRUS_MIRROR_HERMITCRAB_PORT_443_TCP
              value: $(WALRUS_MIRROR_HERMITCRAB_PORT_443_TCP_PROTO)://$(WALRUS_MIRROR_HERMITCRAB_SERVICE_HOST):$(WALRUS_MIRROR_HERMITCRAB_SERVICE_PORT_HTTPS)
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          startupProbe:
            failureThreshold: 10
            periodSeconds: 5
            httpGet:
              port: 80
              path: /readyz
          readinessProbe:
            failureThreshold: 3
            timeoutSeconds: 5
            periodSeconds: 5
            httpGet:
              port: 80
              path: /readyz
          livenessProbe:
            failureThreshold: 10
            timeoutSeconds: 5
            periodSeconds: 10
            httpGet:
              httpHeaders:
                - name: "User-Agent"
                  value: ""
              port: 80
              path: /livez
          volumeMounts:
            - name: custom-tls
              mountPath: /etc/walrus/ssl
            - name: data
              mountPath: /var/run/walrus
      volumes:
        - name: custom-tls
          secret:
            secretName: walrus-custom-tls
            optional: true
        - name: data
          persistentVolumeClaim:
            claimName: walrus
{{- end }}
